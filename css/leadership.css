
/* Current Cabinet Styles */
.current-cabinet-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.cabinet-overview .overview-card {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin: 2rem 0;
}

.stat-item {
    text-align: center;
    padding: 1rem;
    background: var(--neutral);
    border-radius: 12px;
}

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: var(--accent);
}

.overview-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 12px;
}

/* Filter Controls */
.filter-controls {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin: 2rem 0;
}

.filter-btn {
    padding: 0.5rem 1rem;
    border: 2px solid var(--accent);
    border-radius: 20px;
    background: transparent;
    cursor: pointer;
    transition: var(--transition);
}

.filter-btn.active {
    background: var(--accent);
    color: white;
}

/* Leader Cards */
.leader-card {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 2rem;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
}

.leader-photo {
    position: relative;
    height: 250px;
    border-radius: 12px;
    overflow: hidden;
}

.leader-badge {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(43,45,66,0.9);
    color: white;
    padding: 0.5rem;
    text-align: center;
    font-weight: 500;
}

.leader-meta {
    display: flex;
    gap: 1rem;
    margin: 0.5rem 0;
    font-size: 0.9rem;
    color: var(--text-light);
}

.leader-contact {
    margin-top: 1rem;
    display: flex;
    gap: 1rem;
}

.contact-link, .social-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    transition: var(--transition);
}

.contact-link {
    background: var(--accent);
    color: white;
}

.social-link {
    background: var(--neutral);
    color: var(--primary);
}

/* Achievements Grid */
.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
}

.achievement-card {
    text-align: center;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
}

.achievement-icon {
    font-size: 2.5rem;
    color: var(--accent);
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .cabinet-overview .overview-card {
        grid-template-columns: 1fr;
    }
    
    .leader-card {
        grid-template-columns: 1fr;
    }
    
    .leader-photo {
        height: 200px;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
}
```

**js/current-cabinet.js:**
```javascript
document.addEventListener('DOMContentLoaded', () => {
    // Filter functionality
    const filterBtns = document.querySelectorAll('.filter-btn');
    const leaderCards = document.querySelectorAll('.leader-card');

    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            const filter = btn.dataset.filter;
            
            leaderCards.forEach(card => {
                if(filter === 'all' || card.classList.contains(filter)) {
                    card.style.display = 'grid';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });

    // Leader card animations
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if(entry.isIntersecting) {
                entry.target.style.opacity = 1;
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, { threshold: 0.1 });

    leaderCards.forEach(card => {
        card.style.opacity = 0;
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'all 0.4s ease-out';
        observer.observe(card);
    });
});
